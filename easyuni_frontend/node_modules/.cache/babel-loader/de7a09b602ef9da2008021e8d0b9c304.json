{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isReactive, isReadonly, computed, unref, ref, watch, reactive, isRef, nextTick, inject, provide, getCurrentInstance, onBeforeMount, onBeforeUnmount } from 'vue-demi';\nfunction unwrapObj(obj) {\n  let ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Object.keys(obj).reduce((o, k) => {\n    if (ignoreKeys.includes(k)) return o;\n    o[k] = unref(obj[k]);\n    return o;\n  }, {});\n}\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\nfunction get(obj, stringPath, def) {\n  // Cache the current object\n  let current = obj;\n  const path = stringPath.split('.'); // For each item in the path, dig into the object\n\n  for (let i = 0; i < path.length; i++) {\n    // If the item isn't found, return the default (or null)\n    if (!current[path[i]]) return def; // Otherwise, update the current  value\n\n    current = current[path[i]];\n  }\n  return current;\n}\nfunction gatherBooleanGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.some(path => {\n      return get(nestedResults, path, {\n        [property]: false\n      })[property];\n    });\n  });\n}\nfunction gatherArrayGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.reduce((all, path) => {\n      const fetchedProperty = get(nestedResults, path, {\n        [property]: false\n      })[property] || [];\n      return all.concat(fetchedProperty);\n    }, []);\n  });\n}\n\n/**\n * Response form a raw Validator function.\n * Should return a Boolean or an object with $invalid property.\n * @typedef {Boolean | { $valid: Boolean }} ValidatorResponse\n */\n\n/**\n * Calls a validation rule by unwrapping its value first from a ref.\n * @param {Validator} rule\n * @param {Ref} value\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @return {Promise<ValidatorResponse> | ValidatorResponse}\n */\n\nfunction callRule(rule, value, siblingState, instance) {\n  return rule.call(instance, unref(value), unref(siblingState), instance);\n}\n/**\n * Normalizes the validator result\n * Allows passing a boolean of an object like `{ $valid: Boolean }`\n * @param {ValidatorResponse} result - Validator result\n * @return {boolean}\n */\n\nfunction normalizeValidatorResponse(result) {\n  return result.$valid !== undefined ? !result.$valid : !result;\n}\n/**\n * Returns the result of an async validator.\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $pending\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Ref<*>[]} watchTargets\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @param {Ref<Number>} $lastCommittedOn\n * @return {{ $invalid: Ref<Boolean>, $unwatch: WatchStopHandle }}\n */\n\nfunction createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref;\n  let watchTargets = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let siblingState = arguments.length > 8 ? arguments[8] : undefined;\n  let $lastInvalidState = arguments.length > 9 ? arguments[9] : undefined;\n  let $lastCommittedOn = arguments.length > 10 ? arguments[10] : undefined;\n  const $invalid = ref(!!$dirty.value);\n  const $pendingCounter = ref(0);\n  $pending.value = false;\n  const $unwatch = watch([model, $dirty].concat(watchTargets, $lastCommittedOn), () => {\n    if (\n    // if $lazy and not dirty, return\n    $lazy && !$dirty.value ||\n    // if in $rewardEarly mode and no previous errors, nothing pending, return\n    $rewardEarly && !$lastInvalidState.value && !$pending.value) {\n      return;\n    }\n    let ruleResult; // make sure we dont break if a validator throws\n\n    try {\n      ruleResult = callRule(rule, model, siblingState, instance);\n    } catch (err) {\n      // convert to a promise, so we can handle it async\n      ruleResult = Promise.reject(err);\n    }\n    $pendingCounter.value++;\n    $pending.value = !!$pendingCounter.value; // ensure $invalid is false, while validator is resolving\n\n    $invalid.value = false;\n    Promise.resolve(ruleResult).then(data => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = data;\n      $invalid.value = normalizeValidatorResponse(data);\n    }).catch(error => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = error;\n      $invalid.value = true;\n    });\n  }, {\n    immediate: true,\n    deep: typeof model === 'object'\n  });\n  return {\n    $invalid,\n    $unwatch\n  };\n}\n/**\n * Returns the result of a sync validator\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {Boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @return {{$unwatch: (function(): {}), $invalid: ComputedRef<boolean>}}\n */\n\nfunction createSyncResult(rule, model, $dirty, _ref2, $response, instance, siblingState, $lastInvalidState) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref2;\n  const $unwatch = () => ({});\n  const $invalid = computed(() => {\n    if (\n    // return early if $lazy mode and not touched\n    $lazy && !$dirty.value ||\n    // If $rewardEarly mode is ON and last invalid was false (no error), return it.\n    // If we want to invalidate, we just flip the last state to true, causing the computed to run again\n    $rewardEarly && !$lastInvalidState.value) {\n      return false;\n    }\n    let returnValue = true;\n    try {\n      const result = callRule(rule, model, siblingState, instance);\n      $response.value = result;\n      returnValue = normalizeValidatorResponse(result);\n    } catch (err) {\n      $response.value = err;\n    }\n    return returnValue;\n  });\n  return {\n    $unwatch,\n    $invalid\n  };\n}\n/**\n * Returns the validation result.\n * Detects async and sync validators.\n * @param {NormalizedValidator} rule\n * @param {Ref<*>} model\n * @param {Ref<boolean>} $dirty\n * @param {GlobalConfig} config - Vuelidate config\n * @param {VueInstance} instance - component instance\n * @param {string} validatorName - name of the current validator\n * @param {string} propertyKey - the current property we are validating\n * @param {string} propertyPath - the deep path to the validated property\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState - the last invalid state\n * @param {Ref<Number>} $lastCommittedOn - the last time $commit was called\n * @return {{ $params: *, $message: Ref<String>, $pending: Ref<Boolean>, $invalid: Ref<Boolean>, $response: Ref<*>, $unwatch: WatchStopHandle }}\n */\n\nfunction createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath, siblingState, $lastInvalidState, $lastCommittedOn) {\n  const $pending = ref(false);\n  const $params = rule.$params || {};\n  const $response = ref(null);\n  let $invalid;\n  let $unwatch;\n  if (rule.$async) {\n    ({\n      $invalid,\n      $unwatch\n    } = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets, siblingState, $lastInvalidState, $lastCommittedOn));\n  } else {\n    ({\n      $invalid,\n      $unwatch\n    } = createSyncResult(rule.$validator, model, $dirty, config, $response, instance, siblingState, $lastInvalidState));\n  }\n  const message = rule.$message;\n  const $message = isFunction(message) ? computed(() => message(unwrapObj({\n    $pending,\n    $invalid,\n    $params: unwrapObj($params),\n    // $params can hold refs, so we unwrap them for easy access\n    $model: model,\n    $response,\n    $validator: validatorName,\n    $propertyPath: propertyPath,\n    $property: propertyKey\n  }))) : message || '';\n  return {\n    $message,\n    $params,\n    $pending,\n    $invalid,\n    $response,\n    $unwatch\n  };\n}\n\n/**\n * Sorts a validation definition into rules, configs and nested validators.\n * @param {Object<NormalizedValidator|Function>} validationsRaw\n * @return {{ rules: Object<NormalizedValidator>, nestedValidators: Object, config: GlobalConfig }}\n */\n\nfunction sortValidations() {\n  let validationsRaw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const validations = unref(validationsRaw);\n  const validationKeys = Object.keys(validations);\n  const rules = {};\n  const nestedValidators = {};\n  const config = {};\n  let validationGroups = null;\n  validationKeys.forEach(key => {\n    const v = validations[key];\n    switch (true) {\n      // If it is already normalized, use it\n      case isFunction(v.$validator):\n        rules[key] = v;\n        break;\n      // If it is just a function, normalize it first\n      // into { $validator: <Fun> }\n\n      case isFunction(v):\n        rules[key] = {\n          $validator: v\n        };\n        break;\n      case key === '$validationGroups':\n        validationGroups = v;\n        break;\n      // Catch $-prefixed properties as config\n\n      case key.startsWith('$'):\n        config[key] = v;\n        break;\n      // If it doesnâ€™t match any of the above,\n      // treat as nestedValidators state property\n\n      default:\n        nestedValidators[key] = v;\n    }\n  });\n  return {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  };\n}\nfunction _empty() {}\nconst ROOT_PATH = '__root';\n/** @typedef {import('vue-demi').ComponentPublicInstance} VueInstance */\n\n/** @typedef {import('vue-demi').ComputedRef} ComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapRef} UnwrapRef */\n\n/** @typedef {import('vue-demi').WatchStopHandle} WatchStopHandle */\n\n/** @typedef {import('vue-demi').WritableComputedRef} WritableComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapNestedRefs} UnwrapNestedRefs */\n\n/**\n * @typedef NormalizedValidator\n * @property {Validator} $validator\n * @property {String | Ref<String> | function(*): string} [$message]\n * @property {Object | Ref<Object>} [$params]\n * @property {Object | Ref<Object>} [$async]\n * @property {Ref<*>[]} [$watchTargets]\n */\n\n/**\n * Raw validator function, before being normalized\n * Can return a Promise or a {@see ValidatorResponse}\n * @typedef {function(*): ((Promise<ValidatorResponse> | ValidatorResponse))} Validator\n */\n\n/**\n * @typedef ErrorObject\n * @property {Ref<String>} $message - Reactive error message\n * @property {Ref<Object>} $params - Params passed from withParams\n * @property {Ref<Boolean>} $pending - If validation is pending\n * @property {String} $property - State key\n * @property {String} $propertyPath - Dot notation path to state\n * @property {String} $validator - Validator name\n * @property {String} $uid - Unique identifier\n */\n\n/**\n * @typedef ValidationResult\n * @property {Ref<Boolean>} $pending\n * @property {Ref<Boolean>} $dirty\n * @property {Ref<Boolean>} $invalid\n * @property {Ref<Boolean>} $error\n * @property {Ref<String>} $path\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} $commit\n */\n\n/**\n * Creates the main Validation Results object for a state tree\n * Walks the tree's top level branches\n * @param {Object<NormalizedValidator>} rules - Rules for the current state tree\n * @param {Object} model - Current state value\n * @param {String} key - Key for the current state tree\n * @param {ResultsStorage} [resultsCache] - A cache map of all the validators\n * @param {String} [path] - the current property path\n * @param {GlobalConfig} [config] - the config object\n * @param {VueInstance} instance\n * @param {ComputedRef<Object>} externalResults\n * @param {Object} siblingState\n * @return {ValidationResult | {}}\n */\n\nfunction _call(body, then, direct) {\n  if (direct) {\n    return then ? then(body()) : body();\n  }\n  try {\n    var result = Promise.resolve(body());\n    return then ? result.then(then) : result;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n/**\n * Collects the validation results of all nested state properties\n * @param {Object<NormalizedValidator|Function>} validations - The validation\n * @param {Object} nestedState - Current state\n * @param {String} path - Path to current property\n * @param {ResultsStorage} resultsCache - Validations cache map\n * @param {GlobalConfig} config - The config object\n * @param {VueInstance} instance - The current Vue instance\n * @param {ComputedRef<object>} nestedExternalResults - The external results for this nested collection\n * @return {Object<string, VuelidateState>}\n */\n\nfunction _callIgnored(body, direct) {\n  return _call(body, _empty, direct);\n}\nfunction _invoke(body, then) {\n  var result = body();\n  if (result && result.then) {\n    return result.then(then);\n  }\n  return then(result);\n}\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\nfunction createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {\n  // collect the property keys\n  const ruleKeys = Object.keys(rules);\n  const cachedResult = resultsCache.get(path, rules);\n  const $dirty = ref(false); // state for the $rewardEarly option\n\n  /** The last invalid state of this property */\n\n  const $lastInvalidState = ref(false);\n  /** The last time $commit was called. Used to re-trigger async calls */\n\n  const $lastCommittedOn = ref(0);\n  if (cachedResult) {\n    // if the rules are the same as before, use the cached results\n    if (!cachedResult.$partial) return cachedResult; // remove old watchers\n\n    cachedResult.$unwatch(); // use the `$dirty.value`, so we dont save references by accident\n\n    $dirty.value = cachedResult.$dirty.value;\n  }\n  const result = {\n    // restore $dirty from cache\n    $dirty,\n    $path: path,\n    $touch: () => {\n      if (!$dirty.value) $dirty.value = true;\n    },\n    $reset: () => {\n      if ($dirty.value) $dirty.value = false;\n    },\n    $commit: () => {}\n  };\n  /**\n   * If there are no validation rules, it is most likely\n   * a top level state, aka root\n   */\n\n  if (!ruleKeys.length) {\n    // if there are cached results, we should overwrite them with the new ones\n    cachedResult && resultsCache.set(path, rules, result);\n    return result;\n  }\n  ruleKeys.forEach(ruleKey => {\n    result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path, siblingState, $lastInvalidState, $lastCommittedOn);\n  });\n  result.$externalResults = computed(() => {\n    if (!externalResults.value) return [];\n    return [].concat(externalResults.value).map((stringError, index) => ({\n      $propertyPath: path,\n      $property: key,\n      $validator: '$externalResults',\n      $uid: `${path}-externalResult-${index}`,\n      $message: stringError,\n      $params: {},\n      $response: null,\n      $pending: false\n    }));\n  });\n  result.$invalid = computed(() => {\n    const r = ruleKeys.some(ruleKey => unref(result[ruleKey].$invalid)); // cache the last invalid state\n\n    $lastInvalidState.value = r;\n    return !!result.$externalResults.value.length || r;\n  });\n  result.$pending = computed(() => ruleKeys.some(ruleKey => unref(result[ruleKey].$pending)));\n  result.$error = computed(() => result.$dirty.value ? result.$pending.value || result.$invalid.value : false);\n  result.$silentErrors = computed(() => ruleKeys.filter(ruleKey => unref(result[ruleKey].$invalid)).map(ruleKey => {\n    const res = result[ruleKey];\n    return reactive({\n      $propertyPath: path,\n      $property: key,\n      $validator: ruleKey,\n      $uid: `${path}-${ruleKey}`,\n      $message: res.$message,\n      $params: res.$params,\n      $response: res.$response,\n      $pending: res.$pending\n    });\n  }).concat(result.$externalResults.value));\n  result.$errors = computed(() => result.$dirty.value ? result.$silentErrors.value : []);\n  result.$unwatch = () => ruleKeys.forEach(ruleKey => {\n    result[ruleKey].$unwatch();\n  });\n  result.$commit = () => {\n    $lastInvalidState.value = true;\n    $lastCommittedOn.value = Date.now();\n  };\n  resultsCache.set(path, rules, result);\n  return result;\n}\nfunction collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  const nestedValidationKeys = Object.keys(validations); // if we have no state, return empty object\n\n  if (!nestedValidationKeys.length) return {};\n  return nestedValidationKeys.reduce((results, nestedKey) => {\n    // build validation results for nested state\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache,\n      globalConfig: config,\n      instance,\n      externalResults: nestedExternalResults\n    });\n    return results;\n  }, {});\n}\n/**\n * Generates the Meta fields from the results\n * @param {ValidationResult|{}} results\n * @param {Object.<string, VuelidateState>} nestedResults\n * @param {Object.<string, ValidationResult>} childResults\n * @return {{$anyDirty: Ref<Boolean>, $error: Ref<Boolean>, $invalid: Ref<Boolean>, $errors: Ref<ErrorObject[]>, $dirty: Ref<Boolean>, $touch: Function, $reset: Function }}\n */\n\nfunction createMetaFields(results, nestedResults, childResults) {\n  const allResults = computed(() => [nestedResults, childResults].filter(res => res).reduce((allRes, res) => {\n    return allRes.concat(Object.values(unref(res)));\n  }, [])); // returns `$dirty` as true, if all children are dirty\n\n  const $dirty = computed({\n    get() {\n      return results.$dirty.value || (allResults.value.length ? allResults.value.every(r => r.$dirty) : false);\n    },\n    set(v) {\n      results.$dirty.value = v;\n    }\n  });\n  const $silentErrors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$silentErrors) || []; // collect all nested and child $silentErrors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$silentErrors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$silentErrors);\n    }, []); // merge the $silentErrors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $errors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$errors) || []; // collect all nested and child $errors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$errors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$errors);\n    }, []); // merge the $errors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $invalid = computed(() =>\n  // if any of the nested values is invalid\n  allResults.value.some(r => r.$invalid) ||\n  // or if the current state is invalid\n  unref(results.$invalid) ||\n  // fallback to false if is root\n  false);\n  const $pending = computed(() =>\n  // if any of the nested values is pending\n  allResults.value.some(r => unref(r.$pending)) ||\n  // if any of the current state validators is pending\n  unref(results.$pending) ||\n  // fallback to false if is root\n  false);\n  const $anyDirty = computed(() => allResults.value.some(r => r.$dirty) || allResults.value.some(r => r.$anyDirty) || $dirty.value);\n  const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false);\n  const $touch = () => {\n    // call the root $touch\n    results.$touch(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$touch();\n    });\n  };\n  const $commit = () => {\n    // call the root $touch\n    results.$commit(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$commit();\n    });\n  };\n  const $reset = () => {\n    // reset the root $dirty state\n    results.$reset(); // reset all the children $dirty states\n\n    allResults.value.forEach(result => {\n      result.$reset();\n    });\n  }; // Ensure that if all child and nested results are $dirty, this also becomes $dirty\n\n  if (allResults.value.length && allResults.value.every(nr => nr.$dirty)) $touch();\n  return {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  };\n}\n/**\n * @typedef VuelidateState\n * @property {WritableComputedRef<any>} $model\n * @property {ComputedRef<Boolean>} $dirty\n * @property {ComputedRef<Boolean>} $error\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<Boolean>} $invalid\n * @property {ComputedRef<Boolean>} $anyDirty\n * @property {ComputedRef<Boolean>} $pending\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {String} $path\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} [$validate]\n * @property {Function} [$getResultsForChild]\n * @property {Object.<string, VuelidateState>}\n */\n\n/**\n * Main Vuelidate bootstrap function.\n * Used both for Composition API in `setup` and for Global App usage.\n * Used to collect validation state, when walking recursively down the state tree\n * @param {Object} params\n * @param {Object<NormalizedValidator|Function>} params.validations\n * @param {Object} params.state\n * @param {String} [params.key] - Current state property key. Used when being called on nested items\n * @param {String} [params.parentKey] - Parent state property key. Used when being called recursively\n * @param {Object<string, ValidationResult>} [params.childResults] - Used to collect child results.\n * @param {ResultsStorage} params.resultsCache - The cached validation results\n * @param {VueInstance} params.instance - The current Vue instance\n * @param {GlobalConfig} params.globalConfig - The validation config, passed to this setValidations instance.\n * @param {UnwrapNestedRefs<object> | Ref<Object>} params.externalResults - External validation results\n * @return {UnwrapNestedRefs<VuelidateState>}\n */\n\nfunction setValidations(_ref) {\n  /**\n   * Executes the validators and returns the result.\n   * @return {Promise<boolean>}\n   */\n  const $validate = _async(function () {\n    $touch();\n    return _invoke(function () {\n      if (mergedConfig.$rewardEarly) {\n        $commit(); // await the watchers\n\n        return _callIgnored(nextTick);\n      }\n    }, function () {\n      // await the watchers\n      return _call(nextTick, function () {\n        return new Promise(resolve => {\n          // return whether it is valid or not\n          if (!$pending.value) return resolve(!$invalid.value);\n          const unwatch = watch($pending, () => {\n            resolve(!$invalid.value);\n            unwatch();\n          });\n        });\n      });\n    });\n  });\n  /**\n   * Returns a child component's results, based on registration name\n   * @param {string} key\n   * @return {VuelidateState}\n   */\n\n  let {\n    validations,\n    state,\n    key,\n    parentKey,\n    childResults,\n    resultsCache,\n    globalConfig = {},\n    instance,\n    externalResults\n  } = _ref;\n  const path = parentKey ? `${parentKey}.${key}` : key; // Sort out the validation object into:\n  // â€“ rules = validators for current state tree fragment\n  // â€” nestedValidators = nested state fragments keys that might contain more validators\n  // â€“ config = configuration properties that affect this state fragment\n\n  const {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  } = sortValidations(validations);\n  const mergedConfig = Object.assign({}, globalConfig, config); // create protected state for cases when the state branch does not exist yet.\n  // This protects when using the OptionsAPI as the data is bound after the setup method\n\n  const nestedState = key ? computed(() => {\n    const s = unref(state);\n    return s ? unref(s[key]) : undefined;\n  }) : state; // cache the external results, so we can revert back to them\n\n  const cachedExternalResults = Object.assign({}, unref(externalResults) || {});\n  const nestedExternalResults = computed(() => {\n    const results = unref(externalResults);\n    if (!key) return results;\n    return results ? unref(results[key]) : undefined;\n  }); // Use rules for the current state fragment and validate it\n\n  const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state); // Use nested keys to repeat the process\n  // *WARN*: This is recursive\n\n  const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults);\n  const $validationGroups = {};\n  if (validationGroups) {\n    Object.entries(validationGroups).forEach(_ref2 => {\n      let [key, group] = _ref2;\n      $validationGroups[key] = {\n        $invalid: gatherBooleanGroupProperties(group, nestedResults, '$invalid'),\n        $error: gatherBooleanGroupProperties(group, nestedResults, '$error'),\n        $pending: gatherBooleanGroupProperties(group, nestedResults, '$pending'),\n        $errors: gatherArrayGroupProperties(group, nestedResults, '$errors'),\n        $silentErrors: gatherArrayGroupProperties(group, nestedResults, '$silentErrors')\n      };\n    });\n  } // Collect and merge this level validation results\n  // with all nested validation results\n\n  const {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  } = createMetaFields(results, nestedResults, childResults);\n  /**\n   * If we have no `key`, this is the top level state\n   * We dont need `$model` there.\n   */\n\n  const $model = key ? computed({\n    get: () => unref(nestedState),\n    set: val => {\n      $dirty.value = true;\n      const s = unref(state);\n      const external = unref(externalResults);\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n      if (isRef(s[key])) {\n        s[key].value = val;\n      } else {\n        s[key] = val;\n      }\n    }\n  }) : null;\n  if (key && mergedConfig.$autoDirty) {\n    watch(nestedState, () => {\n      if (!$dirty.value) $touch();\n      const external = unref(externalResults);\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n    }, {\n      flush: 'sync'\n    });\n  }\n  function $getResultsForChild(key) {\n    return (childResults.value || {})[key];\n  }\n  function $clearExternalResults() {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults;\n    } else {\n      // if the external results state was empty, we need to delete every property, one by one\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach(k => {\n          delete externalResults[k];\n        });\n      } else {\n        // state was not empty, so we just assign it back into the current state\n        Object.assign(externalResults, cachedExternalResults);\n      }\n    }\n  }\n  return reactive(Object.assign({}, results, {\n    // NOTE: The order here is very important, since we want to override\n    // some of the *results* meta fields with the collective version of it\n    // that includes the results of nested state validation results\n    $model,\n    $dirty,\n    $error,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $pending,\n    $touch,\n    $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors,\n    $validate,\n    $commit\n  }, childResults && {\n    $getResultsForChild,\n    $clearExternalResults,\n    $validationGroups\n  }, nestedResults));\n}\nclass ResultsStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n  /**\n   * Stores a validation result, and its rules by its path\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {ValidationResult} result\n   */\n\n  set(path, rules, result) {\n    this.storage.set(path, {\n      rules,\n      result\n    });\n  }\n  /**\n   * Check if the stored `results` for the provided `path` have the same `rules` compared to 'storedRules'\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {Object<NormalizedValidator>} storedRules\n   * @return {Boolean}\n   */\n\n  checkRulesValidity(path, rules, storedRules) {\n    const storedRulesKeys = Object.keys(storedRules);\n    const newRulesKeys = Object.keys(rules);\n    if (newRulesKeys.length !== storedRulesKeys.length) return false;\n    const hasAllValidators = newRulesKeys.every(ruleKey => storedRulesKeys.includes(ruleKey));\n    if (!hasAllValidators) return false;\n    return newRulesKeys.every(ruleKey => {\n      if (!rules[ruleKey].$params) return true;\n      return Object.keys(rules[ruleKey].$params).every(paramKey => {\n        // make sure to unwrap before comparing\n        return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);\n      });\n    });\n  }\n  /**\n   * Returns the matched result if catche is valid\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @return {{$partial: boolean, $dirty: Ref<Boolean>, $unwatch: function}|undefined|ValidationResult}\n   */\n\n  get(path, rules) {\n    const storedRuleResultPair = this.storage.get(path);\n    if (!storedRuleResultPair) return undefined;\n    const {\n      rules: storedRules,\n      result\n    } = storedRuleResultPair;\n    const isValidCache = this.checkRulesValidity(path, rules, storedRules);\n    const $unwatch = result.$unwatch ? result.$unwatch : () => ({});\n    if (!isValidCache) return {\n      $dirty: result.$dirty,\n      $partial: true,\n      $unwatch\n    };\n    return result;\n  }\n}\nconst CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n};\nconst VuelidateInjectChildResults = Symbol('vuelidate#injectChildResults');\nconst VuelidateRemoveChildResults = Symbol('vuelidate#removeChildResults');\n/**\n * Create helpers to collect validation state from child components\n * @param {Object} params\n * @param {String | Number | Boolean} params.$scope - Parent component scope\n * @return {{sendValidationResultsToParent: function[], childResults: ComputedRef<Object>, removeValidationResultsFromParent: function[]}}\n */\n\nfunction nestedValidations(_ref) {\n  let {\n    $scope,\n    instance\n  } = _ref;\n  const childResultsRaw = {};\n  const childResultsKeys = ref([]);\n  const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {\n    results[key] = unref(childResultsRaw[key]);\n    return results;\n  }, {}));\n  /**\n   * Allows children to send validation data up to their parent.\n   * @param {Object} results - the results\n   * @param {Object} args\n   * @param {String} args.$registerAs - the $registeredAs key\n   * @param {String | Number | Boolean} args.$scope - the $scope key\n   */\n\n  function injectChildResultsIntoParent(results, _ref2) {\n    let {\n      $registerAs: key,\n      $scope: childScope,\n      $stopPropagation\n    } = _ref2;\n    if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope) return;\n    childResultsRaw[key] = results;\n    childResultsKeys.value.push(key);\n  } // combine with other `injectChildResultsIntoParent` from vuelidate instances in this Vue component instance\n\n  instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent);\n  /**\n   * Allows children to remove the validation data from their parent, before getting destroyed.\n   * @param {String} key - the registeredAs key\n   */\n\n  function removeChildResultsFromParent(key) {\n    // remove the key\n    childResultsKeys.value = childResultsKeys.value.filter(childKey => childKey !== key); // remove the stored data for the key\n\n    delete childResultsRaw[key];\n  } // combine with other `removeChildResultsFromParent` from vuelidate instances in this Vue component instance\n\n  instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent); // inject the `injectChildResultsIntoParent` method, into the current scope\n\n  const sendValidationResultsToParent = inject(VuelidateInjectChildResults, []); // provide to all of its children the send results to parent function\n\n  provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances);\n  const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, []); // provide to all of its children the remove results  function\n\n  provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances);\n  return {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  };\n}\n\n/**\n * Helper proxy for instance property access. It makes every reference\n * reactive for the validation function\n * @param target\n * @return {*|ComputedRef<*>}\n */\n\nfunction ComputedProxyFactory(target) {\n  return new Proxy(target, {\n    get(target, prop) {\n      return typeof target[prop] === 'object' ? ComputedProxyFactory(target[prop]) : computed(() => target[prop]);\n    }\n  });\n}\n\n/**\n * @typedef GlobalConfig\n * @property {String} [$registerAs] - Config Object\n * @property {String | Number | Symbol} [$scope] - A scope to limit child component registration\n * @property {Boolean} [$stopPropagation] - Tells a Vue component to stop sending its results up to the parent\n * @property {Ref<Object>} [$externalResults] - External error messages, like from server validation.\n * @property {Boolean} [$autoDirty] - Should the form watch for state changed, and automatically set `$dirty` to true.\n * @property {Boolean} [$lazy] - Should the validations be lazy, and run only after they are dirty\n * @property {Boolean} [$rewardEarly] - Once valid, re-runs property validators only on manual calls of $commit\n */\n\n/**\n * Composition API compatible Vuelidate\n * Use inside the `setup` lifecycle hook\n * @param {Object | GlobalConfig} [validations] - Validations Object or the globalConfig.\n * @param {Object} [state] - State object - required if `validations` is a validation object.\n * @param {GlobalConfig} [globalConfig] - Config Object\n * @return {ComputedRef<*>}\n */\n\nlet uid = 0;\nfunction useVuelidate(validations, state) {\n  var _getCurrentInstance;\n  let globalConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // if we pass only one argument, its most probably the globalConfig.\n  // This use case is so parents can just collect results of child forms.\n  if (arguments.length === 1) {\n    globalConfig = validations;\n    validations = undefined;\n    state = undefined;\n  }\n  let {\n    $registerAs,\n    $scope = CollectFlag.COLLECT_ALL,\n    $stopPropagation,\n    $externalResults,\n    currentVueInstance\n  } = globalConfig;\n  const instance = currentVueInstance || ((_getCurrentInstance = getCurrentInstance()) === null || _getCurrentInstance === void 0 ? void 0 : _getCurrentInstance.proxy);\n  const componentOptions = instance ? instance.$options : {}; // if there is no registration name, add one.\n\n  if (!$registerAs) {\n    uid += 1;\n    $registerAs = `_vuelidate_${uid}`;\n  }\n  const validationResults = ref({});\n  const resultsCache = new ResultsStorage();\n  const {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  } = instance ? nestedValidations({\n    $scope,\n    instance\n  }) : {\n    childResults: ref({})\n  }; // Options API\n\n  if (!validations && componentOptions.validations) {\n    const rules = componentOptions.validations;\n    state = ref({});\n    onBeforeMount(() => {\n      // Delay binding state to validations defined with the Options API until mounting, when the data\n      // has been attached to the component instance. From that point on it will be reactive.\n      state.value = instance;\n      watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules, validations => {\n        validationResults.value = setValidations({\n          validations,\n          state,\n          childResults,\n          resultsCache,\n          globalConfig,\n          instance,\n          externalResults: $externalResults || instance.vuelidateExternalResults\n        });\n      }, {\n        immediate: true\n      });\n    });\n    globalConfig = componentOptions.validationsConfig || globalConfig;\n  } else {\n    const validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations // wrap plain objects in a reactive, so we can track changes if they have computed in them.\n    : reactive(validations || {});\n    watch(validationsWatchTarget, newValidationRules => {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state,\n        childResults,\n        resultsCache,\n        globalConfig,\n        instance: instance !== null && instance !== void 0 ? instance : {},\n        externalResults: $externalResults\n      });\n    }, {\n      immediate: true\n    });\n  }\n  if (instance) {\n    // send all the data to the parent when the function is invoked inside setup.\n    sendValidationResultsToParent.forEach(f => f(validationResults, {\n      $registerAs,\n      $scope,\n      $stopPropagation\n    })); // before this component is destroyed, remove all the data from the parent.\n\n    onBeforeUnmount(() => removeValidationResultsFromParent.forEach(f => f($registerAs)));\n  }\n  return computed(() => {\n    return Object.assign({}, unref(validationResults.value), childResults.value);\n  });\n}\nexport { CollectFlag, useVuelidate as default, useVuelidate };","map":{"version":3,"names":["isReactive","isReadonly","computed","unref","ref","watch","reactive","isRef","nextTick","inject","provide","getCurrentInstance","onBeforeMount","onBeforeUnmount","unwrapObj","obj","ignoreKeys","arguments","length","undefined","Object","keys","reduce","o","k","includes","isFunction","val","isProxy","value","get","stringPath","def","current","path","split","i","gatherBooleanGroupProperties","group","nestedResults","property","some","gatherArrayGroupProperties","all","fetchedProperty","concat","callRule","rule","siblingState","instance","call","normalizeValidatorResponse","result","$valid","createAsyncResult","model","$pending","$dirty","_ref","$response","$lazy","$rewardEarly","watchTargets","$lastInvalidState","$lastCommittedOn","$invalid","$pendingCounter","$unwatch","ruleResult","err","Promise","reject","resolve","then","data","catch","error","immediate","deep","createSyncResult","_ref2","returnValue","createValidatorResult","config","validatorName","propertyKey","propertyPath","$params","$async","$validator","$watchTargets","message","$message","$model","$propertyPath","$property","sortValidations","validationsRaw","validations","validationKeys","rules","nestedValidators","validationGroups","forEach","key","v","startsWith","_empty","ROOT_PATH","_call","body","direct","e","_callIgnored","_invoke","_async","f","args","apply","createValidationResults","resultsCache","externalResults","ruleKeys","cachedResult","$partial","$path","$touch","$reset","$commit","set","ruleKey","$externalResults","map","stringError","index","$uid","r","$error","$silentErrors","filter","res","$errors","Date","now","collectNestedValidationResults","nestedState","nestedExternalResults","nestedValidationKeys","results","nestedKey","setValidations","state","parentKey","globalConfig","createMetaFields","childResults","allResults","allRes","values","every","modelErrors","nestedErrors","errors","$anyDirty","nr","$validate","mergedConfig","unwatch","assign","s","cachedExternalResults","$validationGroups","entries","external","$autoDirty","flush","$getResultsForChild","$clearExternalResults","ResultsStorage","constructor","storage","Map","checkRulesValidity","storedRules","storedRulesKeys","newRulesKeys","hasAllValidators","paramKey","storedRuleResultPair","isValidCache","CollectFlag","COLLECT_ALL","COLLECT_NONE","VuelidateInjectChildResults","Symbol","VuelidateRemoveChildResults","nestedValidations","$scope","childResultsRaw","childResultsKeys","injectChildResultsIntoParent","$registerAs","childScope","$stopPropagation","push","__vuelidateInjectInstances","removeChildResultsFromParent","childKey","__vuelidateRemoveInstances","sendValidationResultsToParent","removeValidationResultsFromParent","ComputedProxyFactory","target","Proxy","prop","uid","useVuelidate","_getCurrentInstance","currentVueInstance","proxy","componentOptions","$options","validationResults","vuelidateExternalResults","validationsConfig","validationsWatchTarget","newValidationRules","default"],"sources":["/Users/yj/Documents/test-project/node_modules/@vuelidate/core/dist/index.esm.js"],"sourcesContent":["import { isReactive, isReadonly, computed, unref, ref, watch, reactive, isRef, nextTick, inject, provide, getCurrentInstance, onBeforeMount, onBeforeUnmount } from 'vue-demi';\n\nfunction unwrapObj(obj) {\n  let ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Object.keys(obj).reduce((o, k) => {\n    if (ignoreKeys.includes(k)) return o;\n    o[k] = unref(obj[k]);\n    return o;\n  }, {});\n}\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\nfunction get(obj, stringPath, def) {\n  // Cache the current object\n  let current = obj;\n  const path = stringPath.split('.'); // For each item in the path, dig into the object\n\n  for (let i = 0; i < path.length; i++) {\n    // If the item isn't found, return the default (or null)\n    if (!current[path[i]]) return def; // Otherwise, update the current  value\n\n    current = current[path[i]];\n  }\n\n  return current;\n}\nfunction gatherBooleanGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.some(path => {\n      return get(nestedResults, path, {\n        [property]: false\n      })[property];\n    });\n  });\n}\nfunction gatherArrayGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.reduce((all, path) => {\n      const fetchedProperty = get(nestedResults, path, {\n        [property]: false\n      })[property] || [];\n      return all.concat(fetchedProperty);\n    }, []);\n  });\n}\n\n/**\n * Response form a raw Validator function.\n * Should return a Boolean or an object with $invalid property.\n * @typedef {Boolean | { $valid: Boolean }} ValidatorResponse\n */\n\n/**\n * Calls a validation rule by unwrapping its value first from a ref.\n * @param {Validator} rule\n * @param {Ref} value\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @return {Promise<ValidatorResponse> | ValidatorResponse}\n */\n\nfunction callRule(rule, value, siblingState, instance) {\n  return rule.call(instance, unref(value), unref(siblingState), instance);\n}\n/**\n * Normalizes the validator result\n * Allows passing a boolean of an object like `{ $valid: Boolean }`\n * @param {ValidatorResponse} result - Validator result\n * @return {boolean}\n */\n\n\nfunction normalizeValidatorResponse(result) {\n  return result.$valid !== undefined ? !result.$valid : !result;\n}\n/**\n * Returns the result of an async validator.\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $pending\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Ref<*>[]} watchTargets\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @param {Ref<Number>} $lastCommittedOn\n * @return {{ $invalid: Ref<Boolean>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref;\n  let watchTargets = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let siblingState = arguments.length > 8 ? arguments[8] : undefined;\n  let $lastInvalidState = arguments.length > 9 ? arguments[9] : undefined;\n  let $lastCommittedOn = arguments.length > 10 ? arguments[10] : undefined;\n  const $invalid = ref(!!$dirty.value);\n  const $pendingCounter = ref(0);\n  $pending.value = false;\n  const $unwatch = watch([model, $dirty].concat(watchTargets, $lastCommittedOn), () => {\n    if ( // if $lazy and not dirty, return\n    $lazy && !$dirty.value || // if in $rewardEarly mode and no previous errors, nothing pending, return\n    $rewardEarly && !$lastInvalidState.value && !$pending.value) {\n      return;\n    }\n\n    let ruleResult; // make sure we dont break if a validator throws\n\n    try {\n      ruleResult = callRule(rule, model, siblingState, instance);\n    } catch (err) {\n      // convert to a promise, so we can handle it async\n      ruleResult = Promise.reject(err);\n    }\n\n    $pendingCounter.value++;\n    $pending.value = !!$pendingCounter.value; // ensure $invalid is false, while validator is resolving\n\n    $invalid.value = false;\n    Promise.resolve(ruleResult).then(data => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = data;\n      $invalid.value = normalizeValidatorResponse(data);\n    }).catch(error => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = error;\n      $invalid.value = true;\n    });\n  }, {\n    immediate: true,\n    deep: typeof model === 'object'\n  });\n  return {\n    $invalid,\n    $unwatch\n  };\n}\n/**\n * Returns the result of a sync validator\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {Boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @return {{$unwatch: (function(): {}), $invalid: ComputedRef<boolean>}}\n */\n\n\nfunction createSyncResult(rule, model, $dirty, _ref2, $response, instance, siblingState, $lastInvalidState) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref2;\n\n  const $unwatch = () => ({});\n\n  const $invalid = computed(() => {\n    if ( // return early if $lazy mode and not touched\n    $lazy && !$dirty.value || // If $rewardEarly mode is ON and last invalid was false (no error), return it.\n    // If we want to invalidate, we just flip the last state to true, causing the computed to run again\n    $rewardEarly && !$lastInvalidState.value) {\n      return false;\n    }\n\n    let returnValue = true;\n\n    try {\n      const result = callRule(rule, model, siblingState, instance);\n      $response.value = result;\n      returnValue = normalizeValidatorResponse(result);\n    } catch (err) {\n      $response.value = err;\n    }\n\n    return returnValue;\n  });\n  return {\n    $unwatch,\n    $invalid\n  };\n}\n/**\n * Returns the validation result.\n * Detects async and sync validators.\n * @param {NormalizedValidator} rule\n * @param {Ref<*>} model\n * @param {Ref<boolean>} $dirty\n * @param {GlobalConfig} config - Vuelidate config\n * @param {VueInstance} instance - component instance\n * @param {string} validatorName - name of the current validator\n * @param {string} propertyKey - the current property we are validating\n * @param {string} propertyPath - the deep path to the validated property\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState - the last invalid state\n * @param {Ref<Number>} $lastCommittedOn - the last time $commit was called\n * @return {{ $params: *, $message: Ref<String>, $pending: Ref<Boolean>, $invalid: Ref<Boolean>, $response: Ref<*>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath, siblingState, $lastInvalidState, $lastCommittedOn) {\n  const $pending = ref(false);\n  const $params = rule.$params || {};\n  const $response = ref(null);\n  let $invalid;\n  let $unwatch;\n\n  if (rule.$async) {\n    ({\n      $invalid,\n      $unwatch\n    } = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets, siblingState, $lastInvalidState, $lastCommittedOn));\n  } else {\n    ({\n      $invalid,\n      $unwatch\n    } = createSyncResult(rule.$validator, model, $dirty, config, $response, instance, siblingState, $lastInvalidState));\n  }\n\n  const message = rule.$message;\n  const $message = isFunction(message) ? computed(() => message(unwrapObj({\n    $pending,\n    $invalid,\n    $params: unwrapObj($params),\n    // $params can hold refs, so we unwrap them for easy access\n    $model: model,\n    $response,\n    $validator: validatorName,\n    $propertyPath: propertyPath,\n    $property: propertyKey\n  }))) : message || '';\n  return {\n    $message,\n    $params,\n    $pending,\n    $invalid,\n    $response,\n    $unwatch\n  };\n}\n\n/**\n * Sorts a validation definition into rules, configs and nested validators.\n * @param {Object<NormalizedValidator|Function>} validationsRaw\n * @return {{ rules: Object<NormalizedValidator>, nestedValidators: Object, config: GlobalConfig }}\n */\n\nfunction sortValidations() {\n  let validationsRaw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const validations = unref(validationsRaw);\n  const validationKeys = Object.keys(validations);\n  const rules = {};\n  const nestedValidators = {};\n  const config = {};\n  let validationGroups = null;\n  validationKeys.forEach(key => {\n    const v = validations[key];\n\n    switch (true) {\n      // If it is already normalized, use it\n      case isFunction(v.$validator):\n        rules[key] = v;\n        break;\n      // If it is just a function, normalize it first\n      // into { $validator: <Fun> }\n\n      case isFunction(v):\n        rules[key] = {\n          $validator: v\n        };\n        break;\n\n      case key === '$validationGroups':\n        validationGroups = v;\n        break;\n      // Catch $-prefixed properties as config\n\n      case key.startsWith('$'):\n        config[key] = v;\n        break;\n      // If it doesnâ€™t match any of the above,\n      // treat as nestedValidators state property\n\n      default:\n        nestedValidators[key] = v;\n    }\n  });\n  return {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  };\n}\n\nfunction _empty() {}\n\nconst ROOT_PATH = '__root';\n/** @typedef {import('vue-demi').ComponentPublicInstance} VueInstance */\n\n/** @typedef {import('vue-demi').ComputedRef} ComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapRef} UnwrapRef */\n\n/** @typedef {import('vue-demi').WatchStopHandle} WatchStopHandle */\n\n/** @typedef {import('vue-demi').WritableComputedRef} WritableComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapNestedRefs} UnwrapNestedRefs */\n\n/**\n * @typedef NormalizedValidator\n * @property {Validator} $validator\n * @property {String | Ref<String> | function(*): string} [$message]\n * @property {Object | Ref<Object>} [$params]\n * @property {Object | Ref<Object>} [$async]\n * @property {Ref<*>[]} [$watchTargets]\n */\n\n/**\n * Raw validator function, before being normalized\n * Can return a Promise or a {@see ValidatorResponse}\n * @typedef {function(*): ((Promise<ValidatorResponse> | ValidatorResponse))} Validator\n */\n\n/**\n * @typedef ErrorObject\n * @property {Ref<String>} $message - Reactive error message\n * @property {Ref<Object>} $params - Params passed from withParams\n * @property {Ref<Boolean>} $pending - If validation is pending\n * @property {String} $property - State key\n * @property {String} $propertyPath - Dot notation path to state\n * @property {String} $validator - Validator name\n * @property {String} $uid - Unique identifier\n */\n\n/**\n * @typedef ValidationResult\n * @property {Ref<Boolean>} $pending\n * @property {Ref<Boolean>} $dirty\n * @property {Ref<Boolean>} $invalid\n * @property {Ref<Boolean>} $error\n * @property {Ref<String>} $path\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} $commit\n */\n\n/**\n * Creates the main Validation Results object for a state tree\n * Walks the tree's top level branches\n * @param {Object<NormalizedValidator>} rules - Rules for the current state tree\n * @param {Object} model - Current state value\n * @param {String} key - Key for the current state tree\n * @param {ResultsStorage} [resultsCache] - A cache map of all the validators\n * @param {String} [path] - the current property path\n * @param {GlobalConfig} [config] - the config object\n * @param {VueInstance} instance\n * @param {ComputedRef<Object>} externalResults\n * @param {Object} siblingState\n * @return {ValidationResult | {}}\n */\n\nfunction _call(body, then, direct) {\n  if (direct) {\n    return then ? then(body()) : body();\n  }\n\n  try {\n    var result = Promise.resolve(body());\n    return then ? result.then(then) : result;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n/**\n * Collects the validation results of all nested state properties\n * @param {Object<NormalizedValidator|Function>} validations - The validation\n * @param {Object} nestedState - Current state\n * @param {String} path - Path to current property\n * @param {ResultsStorage} resultsCache - Validations cache map\n * @param {GlobalConfig} config - The config object\n * @param {VueInstance} instance - The current Vue instance\n * @param {ComputedRef<object>} nestedExternalResults - The external results for this nested collection\n * @return {Object<string, VuelidateState>}\n */\n\n\nfunction _callIgnored(body, direct) {\n  return _call(body, _empty, direct);\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {\n  // collect the property keys\n  const ruleKeys = Object.keys(rules);\n  const cachedResult = resultsCache.get(path, rules);\n  const $dirty = ref(false); // state for the $rewardEarly option\n\n  /** The last invalid state of this property */\n\n  const $lastInvalidState = ref(false);\n  /** The last time $commit was called. Used to re-trigger async calls */\n\n  const $lastCommittedOn = ref(0);\n\n  if (cachedResult) {\n    // if the rules are the same as before, use the cached results\n    if (!cachedResult.$partial) return cachedResult; // remove old watchers\n\n    cachedResult.$unwatch(); // use the `$dirty.value`, so we dont save references by accident\n\n    $dirty.value = cachedResult.$dirty.value;\n  }\n\n  const result = {\n    // restore $dirty from cache\n    $dirty,\n    $path: path,\n    $touch: () => {\n      if (!$dirty.value) $dirty.value = true;\n    },\n    $reset: () => {\n      if ($dirty.value) $dirty.value = false;\n    },\n    $commit: () => {}\n  };\n  /**\n   * If there are no validation rules, it is most likely\n   * a top level state, aka root\n   */\n\n  if (!ruleKeys.length) {\n    // if there are cached results, we should overwrite them with the new ones\n    cachedResult && resultsCache.set(path, rules, result);\n    return result;\n  }\n\n  ruleKeys.forEach(ruleKey => {\n    result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path, siblingState, $lastInvalidState, $lastCommittedOn);\n  });\n  result.$externalResults = computed(() => {\n    if (!externalResults.value) return [];\n    return [].concat(externalResults.value).map((stringError, index) => ({\n      $propertyPath: path,\n      $property: key,\n      $validator: '$externalResults',\n      $uid: `${path}-externalResult-${index}`,\n      $message: stringError,\n      $params: {},\n      $response: null,\n      $pending: false\n    }));\n  });\n  result.$invalid = computed(() => {\n    const r = ruleKeys.some(ruleKey => unref(result[ruleKey].$invalid)); // cache the last invalid state\n\n    $lastInvalidState.value = r;\n    return !!result.$externalResults.value.length || r;\n  });\n  result.$pending = computed(() => ruleKeys.some(ruleKey => unref(result[ruleKey].$pending)));\n  result.$error = computed(() => result.$dirty.value ? result.$pending.value || result.$invalid.value : false);\n  result.$silentErrors = computed(() => ruleKeys.filter(ruleKey => unref(result[ruleKey].$invalid)).map(ruleKey => {\n    const res = result[ruleKey];\n    return reactive({\n      $propertyPath: path,\n      $property: key,\n      $validator: ruleKey,\n      $uid: `${path}-${ruleKey}`,\n      $message: res.$message,\n      $params: res.$params,\n      $response: res.$response,\n      $pending: res.$pending\n    });\n  }).concat(result.$externalResults.value));\n  result.$errors = computed(() => result.$dirty.value ? result.$silentErrors.value : []);\n\n  result.$unwatch = () => ruleKeys.forEach(ruleKey => {\n    result[ruleKey].$unwatch();\n  });\n\n  result.$commit = () => {\n    $lastInvalidState.value = true;\n    $lastCommittedOn.value = Date.now();\n  };\n\n  resultsCache.set(path, rules, result);\n  return result;\n}\n\nfunction collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  const nestedValidationKeys = Object.keys(validations); // if we have no state, return empty object\n\n  if (!nestedValidationKeys.length) return {};\n  return nestedValidationKeys.reduce((results, nestedKey) => {\n    // build validation results for nested state\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache,\n      globalConfig: config,\n      instance,\n      externalResults: nestedExternalResults\n    });\n    return results;\n  }, {});\n}\n/**\n * Generates the Meta fields from the results\n * @param {ValidationResult|{}} results\n * @param {Object.<string, VuelidateState>} nestedResults\n * @param {Object.<string, ValidationResult>} childResults\n * @return {{$anyDirty: Ref<Boolean>, $error: Ref<Boolean>, $invalid: Ref<Boolean>, $errors: Ref<ErrorObject[]>, $dirty: Ref<Boolean>, $touch: Function, $reset: Function }}\n */\n\n\nfunction createMetaFields(results, nestedResults, childResults) {\n  const allResults = computed(() => [nestedResults, childResults].filter(res => res).reduce((allRes, res) => {\n    return allRes.concat(Object.values(unref(res)));\n  }, [])); // returns `$dirty` as true, if all children are dirty\n\n  const $dirty = computed({\n    get() {\n      return results.$dirty.value || (allResults.value.length ? allResults.value.every(r => r.$dirty) : false);\n    },\n\n    set(v) {\n      results.$dirty.value = v;\n    }\n\n  });\n  const $silentErrors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$silentErrors) || []; // collect all nested and child $silentErrors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$silentErrors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$silentErrors);\n    }, []); // merge the $silentErrors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $errors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$errors) || []; // collect all nested and child $errors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$errors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$errors);\n    }, []); // merge the $errors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $invalid = computed(() => // if any of the nested values is invalid\n  allResults.value.some(r => r.$invalid) || // or if the current state is invalid\n  unref(results.$invalid) || // fallback to false if is root\n  false);\n  const $pending = computed(() => // if any of the nested values is pending\n  allResults.value.some(r => unref(r.$pending)) || // if any of the current state validators is pending\n  unref(results.$pending) || // fallback to false if is root\n  false);\n  const $anyDirty = computed(() => allResults.value.some(r => r.$dirty) || allResults.value.some(r => r.$anyDirty) || $dirty.value);\n  const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false);\n\n  const $touch = () => {\n    // call the root $touch\n    results.$touch(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$touch();\n    });\n  };\n\n  const $commit = () => {\n    // call the root $touch\n    results.$commit(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$commit();\n    });\n  };\n\n  const $reset = () => {\n    // reset the root $dirty state\n    results.$reset(); // reset all the children $dirty states\n\n    allResults.value.forEach(result => {\n      result.$reset();\n    });\n  }; // Ensure that if all child and nested results are $dirty, this also becomes $dirty\n\n\n  if (allResults.value.length && allResults.value.every(nr => nr.$dirty)) $touch();\n  return {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  };\n}\n/**\n * @typedef VuelidateState\n * @property {WritableComputedRef<any>} $model\n * @property {ComputedRef<Boolean>} $dirty\n * @property {ComputedRef<Boolean>} $error\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<Boolean>} $invalid\n * @property {ComputedRef<Boolean>} $anyDirty\n * @property {ComputedRef<Boolean>} $pending\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {String} $path\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} [$validate]\n * @property {Function} [$getResultsForChild]\n * @property {Object.<string, VuelidateState>}\n */\n\n/**\n * Main Vuelidate bootstrap function.\n * Used both for Composition API in `setup` and for Global App usage.\n * Used to collect validation state, when walking recursively down the state tree\n * @param {Object} params\n * @param {Object<NormalizedValidator|Function>} params.validations\n * @param {Object} params.state\n * @param {String} [params.key] - Current state property key. Used when being called on nested items\n * @param {String} [params.parentKey] - Parent state property key. Used when being called recursively\n * @param {Object<string, ValidationResult>} [params.childResults] - Used to collect child results.\n * @param {ResultsStorage} params.resultsCache - The cached validation results\n * @param {VueInstance} params.instance - The current Vue instance\n * @param {GlobalConfig} params.globalConfig - The validation config, passed to this setValidations instance.\n * @param {UnwrapNestedRefs<object> | Ref<Object>} params.externalResults - External validation results\n * @return {UnwrapNestedRefs<VuelidateState>}\n */\n\n\nfunction setValidations(_ref) {\n  /**\n   * Executes the validators and returns the result.\n   * @return {Promise<boolean>}\n   */\n  const $validate = _async(function () {\n    $touch();\n    return _invoke(function () {\n      if (mergedConfig.$rewardEarly) {\n        $commit(); // await the watchers\n\n        return _callIgnored(nextTick);\n      }\n    }, function () {\n      // await the watchers\n      return _call(nextTick, function () {\n        return new Promise(resolve => {\n          // return whether it is valid or not\n          if (!$pending.value) return resolve(!$invalid.value);\n          const unwatch = watch($pending, () => {\n            resolve(!$invalid.value);\n            unwatch();\n          });\n        });\n      });\n    });\n  });\n  /**\n   * Returns a child component's results, based on registration name\n   * @param {string} key\n   * @return {VuelidateState}\n   */\n\n\n  let {\n    validations,\n    state,\n    key,\n    parentKey,\n    childResults,\n    resultsCache,\n    globalConfig = {},\n    instance,\n    externalResults\n  } = _ref;\n  const path = parentKey ? `${parentKey}.${key}` : key; // Sort out the validation object into:\n  // â€“ rules = validators for current state tree fragment\n  // â€” nestedValidators = nested state fragments keys that might contain more validators\n  // â€“ config = configuration properties that affect this state fragment\n\n  const {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  } = sortValidations(validations);\n  const mergedConfig = Object.assign({}, globalConfig, config); // create protected state for cases when the state branch does not exist yet.\n  // This protects when using the OptionsAPI as the data is bound after the setup method\n\n  const nestedState = key ? computed(() => {\n    const s = unref(state);\n    return s ? unref(s[key]) : undefined;\n  }) : state; // cache the external results, so we can revert back to them\n\n  const cachedExternalResults = Object.assign({}, unref(externalResults) || {});\n  const nestedExternalResults = computed(() => {\n    const results = unref(externalResults);\n    if (!key) return results;\n    return results ? unref(results[key]) : undefined;\n  }); // Use rules for the current state fragment and validate it\n\n  const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state); // Use nested keys to repeat the process\n  // *WARN*: This is recursive\n\n  const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults);\n  const $validationGroups = {};\n\n  if (validationGroups) {\n    Object.entries(validationGroups).forEach(_ref2 => {\n      let [key, group] = _ref2;\n      $validationGroups[key] = {\n        $invalid: gatherBooleanGroupProperties(group, nestedResults, '$invalid'),\n        $error: gatherBooleanGroupProperties(group, nestedResults, '$error'),\n        $pending: gatherBooleanGroupProperties(group, nestedResults, '$pending'),\n        $errors: gatherArrayGroupProperties(group, nestedResults, '$errors'),\n        $silentErrors: gatherArrayGroupProperties(group, nestedResults, '$silentErrors')\n      };\n    });\n  } // Collect and merge this level validation results\n  // with all nested validation results\n\n\n  const {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  } = createMetaFields(results, nestedResults, childResults);\n  /**\n   * If we have no `key`, this is the top level state\n   * We dont need `$model` there.\n   */\n\n  const $model = key ? computed({\n    get: () => unref(nestedState),\n    set: val => {\n      $dirty.value = true;\n      const s = unref(state);\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n\n      if (isRef(s[key])) {\n        s[key].value = val;\n      } else {\n        s[key] = val;\n      }\n    }\n  }) : null;\n\n  if (key && mergedConfig.$autoDirty) {\n    watch(nestedState, () => {\n      if (!$dirty.value) $touch();\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n    }, {\n      flush: 'sync'\n    });\n  }\n\n  function $getResultsForChild(key) {\n    return (childResults.value || {})[key];\n  }\n\n  function $clearExternalResults() {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults;\n    } else {\n      // if the external results state was empty, we need to delete every property, one by one\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach(k => {\n          delete externalResults[k];\n        });\n      } else {\n        // state was not empty, so we just assign it back into the current state\n        Object.assign(externalResults, cachedExternalResults);\n      }\n    }\n  }\n\n  return reactive(Object.assign({}, results, {\n    // NOTE: The order here is very important, since we want to override\n    // some of the *results* meta fields with the collective version of it\n    // that includes the results of nested state validation results\n    $model,\n    $dirty,\n    $error,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $pending,\n    $touch,\n    $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors,\n    $validate,\n    $commit\n  }, childResults && {\n    $getResultsForChild,\n    $clearExternalResults,\n    $validationGroups\n  }, nestedResults));\n}\n\nclass ResultsStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n  /**\n   * Stores a validation result, and its rules by its path\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {ValidationResult} result\n   */\n\n\n  set(path, rules, result) {\n    this.storage.set(path, {\n      rules,\n      result\n    });\n  }\n  /**\n   * Check if the stored `results` for the provided `path` have the same `rules` compared to 'storedRules'\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {Object<NormalizedValidator>} storedRules\n   * @return {Boolean}\n   */\n\n\n  checkRulesValidity(path, rules, storedRules) {\n    const storedRulesKeys = Object.keys(storedRules);\n    const newRulesKeys = Object.keys(rules);\n    if (newRulesKeys.length !== storedRulesKeys.length) return false;\n    const hasAllValidators = newRulesKeys.every(ruleKey => storedRulesKeys.includes(ruleKey));\n    if (!hasAllValidators) return false;\n    return newRulesKeys.every(ruleKey => {\n      if (!rules[ruleKey].$params) return true;\n      return Object.keys(rules[ruleKey].$params).every(paramKey => {\n        // make sure to unwrap before comparing\n        return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);\n      });\n    });\n  }\n  /**\n   * Returns the matched result if catche is valid\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @return {{$partial: boolean, $dirty: Ref<Boolean>, $unwatch: function}|undefined|ValidationResult}\n   */\n\n\n  get(path, rules) {\n    const storedRuleResultPair = this.storage.get(path);\n    if (!storedRuleResultPair) return undefined;\n    const {\n      rules: storedRules,\n      result\n    } = storedRuleResultPair;\n    const isValidCache = this.checkRulesValidity(path, rules, storedRules);\n    const $unwatch = result.$unwatch ? result.$unwatch : () => ({});\n    if (!isValidCache) return {\n      $dirty: result.$dirty,\n      $partial: true,\n      $unwatch\n    };\n    return result;\n  }\n\n}\n\nconst CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n};\nconst VuelidateInjectChildResults = Symbol('vuelidate#injectChildResults');\nconst VuelidateRemoveChildResults = Symbol('vuelidate#removeChildResults');\n/**\n * Create helpers to collect validation state from child components\n * @param {Object} params\n * @param {String | Number | Boolean} params.$scope - Parent component scope\n * @return {{sendValidationResultsToParent: function[], childResults: ComputedRef<Object>, removeValidationResultsFromParent: function[]}}\n */\n\nfunction nestedValidations(_ref) {\n  let {\n    $scope,\n    instance\n  } = _ref;\n  const childResultsRaw = {};\n  const childResultsKeys = ref([]);\n  const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {\n    results[key] = unref(childResultsRaw[key]);\n    return results;\n  }, {}));\n  /**\n   * Allows children to send validation data up to their parent.\n   * @param {Object} results - the results\n   * @param {Object} args\n   * @param {String} args.$registerAs - the $registeredAs key\n   * @param {String | Number | Boolean} args.$scope - the $scope key\n   */\n\n  function injectChildResultsIntoParent(results, _ref2) {\n    let {\n      $registerAs: key,\n      $scope: childScope,\n      $stopPropagation\n    } = _ref2;\n    if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope) return;\n    childResultsRaw[key] = results;\n    childResultsKeys.value.push(key);\n  } // combine with other `injectChildResultsIntoParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent);\n  /**\n   * Allows children to remove the validation data from their parent, before getting destroyed.\n   * @param {String} key - the registeredAs key\n   */\n\n  function removeChildResultsFromParent(key) {\n    // remove the key\n    childResultsKeys.value = childResultsKeys.value.filter(childKey => childKey !== key); // remove the stored data for the key\n\n    delete childResultsRaw[key];\n  } // combine with other `removeChildResultsFromParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent); // inject the `injectChildResultsIntoParent` method, into the current scope\n\n  const sendValidationResultsToParent = inject(VuelidateInjectChildResults, []); // provide to all of its children the send results to parent function\n\n  provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances);\n  const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, []); // provide to all of its children the remove results  function\n\n  provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances);\n  return {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  };\n}\n\n/**\n * Helper proxy for instance property access. It makes every reference\n * reactive for the validation function\n * @param target\n * @return {*|ComputedRef<*>}\n */\n\nfunction ComputedProxyFactory(target) {\n  return new Proxy(target, {\n    get(target, prop) {\n      return typeof target[prop] === 'object' ? ComputedProxyFactory(target[prop]) : computed(() => target[prop]);\n    }\n\n  });\n}\n\n/**\n * @typedef GlobalConfig\n * @property {String} [$registerAs] - Config Object\n * @property {String | Number | Symbol} [$scope] - A scope to limit child component registration\n * @property {Boolean} [$stopPropagation] - Tells a Vue component to stop sending its results up to the parent\n * @property {Ref<Object>} [$externalResults] - External error messages, like from server validation.\n * @property {Boolean} [$autoDirty] - Should the form watch for state changed, and automatically set `$dirty` to true.\n * @property {Boolean} [$lazy] - Should the validations be lazy, and run only after they are dirty\n * @property {Boolean} [$rewardEarly] - Once valid, re-runs property validators only on manual calls of $commit\n */\n\n/**\n * Composition API compatible Vuelidate\n * Use inside the `setup` lifecycle hook\n * @param {Object | GlobalConfig} [validations] - Validations Object or the globalConfig.\n * @param {Object} [state] - State object - required if `validations` is a validation object.\n * @param {GlobalConfig} [globalConfig] - Config Object\n * @return {ComputedRef<*>}\n */\n\nlet uid = 0;\nfunction useVuelidate(validations, state) {\n  var _getCurrentInstance;\n\n  let globalConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // if we pass only one argument, its most probably the globalConfig.\n  // This use case is so parents can just collect results of child forms.\n  if (arguments.length === 1) {\n    globalConfig = validations;\n    validations = undefined;\n    state = undefined;\n  }\n\n  let {\n    $registerAs,\n    $scope = CollectFlag.COLLECT_ALL,\n    $stopPropagation,\n    $externalResults,\n    currentVueInstance\n  } = globalConfig;\n  const instance = currentVueInstance || ((_getCurrentInstance = getCurrentInstance()) === null || _getCurrentInstance === void 0 ? void 0 : _getCurrentInstance.proxy);\n  const componentOptions = instance ? instance.$options : {}; // if there is no registration name, add one.\n\n  if (!$registerAs) {\n    uid += 1;\n    $registerAs = `_vuelidate_${uid}`;\n  }\n\n  const validationResults = ref({});\n  const resultsCache = new ResultsStorage();\n  const {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  } = instance ? nestedValidations({\n    $scope,\n    instance\n  }) : {\n    childResults: ref({})\n  }; // Options API\n\n  if (!validations && componentOptions.validations) {\n    const rules = componentOptions.validations;\n    state = ref({});\n    onBeforeMount(() => {\n      // Delay binding state to validations defined with the Options API until mounting, when the data\n      // has been attached to the component instance. From that point on it will be reactive.\n      state.value = instance;\n      watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules, validations => {\n        validationResults.value = setValidations({\n          validations,\n          state,\n          childResults,\n          resultsCache,\n          globalConfig,\n          instance,\n          externalResults: $externalResults || instance.vuelidateExternalResults\n        });\n      }, {\n        immediate: true\n      });\n    });\n    globalConfig = componentOptions.validationsConfig || globalConfig;\n  } else {\n    const validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations // wrap plain objects in a reactive, so we can track changes if they have computed in them.\n    : reactive(validations || {});\n    watch(validationsWatchTarget, newValidationRules => {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state,\n        childResults,\n        resultsCache,\n        globalConfig,\n        instance: instance !== null && instance !== void 0 ? instance : {},\n        externalResults: $externalResults\n      });\n    }, {\n      immediate: true\n    });\n  }\n\n  if (instance) {\n    // send all the data to the parent when the function is invoked inside setup.\n    sendValidationResultsToParent.forEach(f => f(validationResults, {\n      $registerAs,\n      $scope,\n      $stopPropagation\n    })); // before this component is destroyed, remove all the data from the parent.\n\n    onBeforeUnmount(() => removeValidationResultsFromParent.forEach(f => f($registerAs)));\n  }\n\n  return computed(() => {\n    return Object.assign({}, unref(validationResults.value), childResults.value);\n  });\n}\n\nexport { CollectFlag, useVuelidate as default, useVuelidate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}